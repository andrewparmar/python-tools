# BACKGROUND
# Sometimes items cannot be shipped to certain zip codes, and the rules for these restrictions are stored as a series of ranges of 5 digit codes.
# For example if the ranges are:
# [94133,94133] [94200,94299] [94600,94699]
# Then the item can be shipped to zip code 94199, 94300, and 65532, but cannot be shipped to 94133, 94650, 94230, 94600, or 94299.
# Any item might be restricted based on multiple sets of these ranges
# obtained from multiple sources.

# PROBLEM
# Given a collection of 5 digit ZIP code ranges (each range includes both
# their upper and lower bounds),
# provide an algorithm that produces the minimum number of ranges required to represent the same restrictions as the input .


import unittest

# Implementation
def zip_range_reducer(zip_range_list):

	if not zip_range_list:
		raise Exception("Empty list of ranges provided!")

	reduced_list_ranges = []

	zip_range_list.sort()
	# print zip_range_list

	while (zip_range_list):
		no_overlap_list = []
		if len(zip_range_list) == 1:
			reduced_list_ranges.append(zip_range_list[0])
			return reduced_list_ranges
		reduced_list_ranges.append(zip_range_list[0])
		zip_range_list.pop(0)
		for zip_range in zip_range_list:
			low, high = reduced_list_ranges[-1][0], reduced_list_ranges[-1][1]
			# print "Low: ", low, "high: ", high
			if zip_range[0] in range(low-1, high+2) or zip_range[1] in range(low-1, high+2):
				# print "Before:", reduced_list_ranges[-1], " Zip Range: ",zip_range
				reduced_list_ranges[-1][0] = min(reduced_list_ranges[-1][0], zip_range[0])
				reduced_list_ranges[-1][1] = max(reduced_list_ranges[-1][1], zip_range[1])
				# print "After:", reduced_list_ranges[-1]
			else:
				# print "No OverLap: ",zip_range
				no_overlap_list.append(zip_range)
		zip_range_list = no_overlap_list

	# print "Reduced LIST: "reduced_list_ranges
	return reduced_list_ranges

# print zip_range_reducer([[14,17], [4,7], [2,5], [10,12] , [15,16], [4,9], [11,13]])


# Testing
class Test_range_reducer(unittest.TestCase):

    def setUp(self):
        self.SET1 = [[94133, 94133], [94200, 94299],
                     [94600, 94699], [94120, 94133]]
        self.SET2 = [[94133, 94299]]
        self.SET3 = []
        self.SET4 = [[14,17], [4,7], [2,5], [10,12] , [15,16], [4,9], [11,13]]

    def test_range_reducer(self):
        self.assertEquals(zip_range_reducer(self.SET1), [[94120, 94133],[94200, 94299],[94600, 94699]])
        self.assertEquals(zip_range_reducer(self.SET2), [[94133, 94299]])
        self.assertEquals(zip_range_reducer(self.SET2), [[94133, 94299]])
        self.assertEquals(zip_range_reducer(self.SET4), [[2,17]])

    def test_range_reducer_exception(self):
        self.assertRaises(Exception, zip_range_reducer, self.SET3)


if __name__ == "__main__":
    unittest.main()